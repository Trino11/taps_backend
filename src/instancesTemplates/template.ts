import db from './../database'
import fs from 'fs'
import https from 'https'

class Template {
    constructor() { }

    private start(path: string) {
        if (fs.existsSync(path)) {
            let father = path.replace("\\latest\\", '')
            fs.renameSync(father, father + '_old_' + Math.floor(Math.random() * 99999 + 1).toString() + '\\')
        }
        fs.mkdirSync(path, { recursive: true })
        fs.writeFileSync(path + "latestCheckStatus.bat", "Generated by default")
        fs.writeFileSync(path + "latestStart.bat", "Generated by default")
        fs.writeFileSync(path + "latestStop.bat", "Generated by default")
        fs.writeFileSync(path + "latestRestart.bat", "Generated by default")
        fs.writeFileSync(path + "latestForceStop.bat", "Generated by default")
    }

    public async minecraftTemplate(path: string, name: string, options: { mem?: string, version?: string, launcher?: string, port?: string, rconPort?: string, rconPass?: string, seed?: string }) {
        this.start(path)
        let servProp: string = fs.readFileSync('src\\instancesTemplates\\minecraft\\server.properties').toString()

        let start: string = fs.readFileSync('src\\instancesTemplates\\minecraft\\latestStart.bat').toString()
        start = start.replace('[servNameRepl]', name)
        if (options.mem)
            start = start.replace('-Xms10G -Xmx10G', `-Xms${options.mem}G -Xmx${options.mem}G`)
        if (options.version) { }
        if (options.launcher) { }
        fs.writeFileSync(path + "latestStart.bat", start)

        let stop: string = fs.readFileSync('src\\instancesTemplates\\minecraft\\latestStop.bat').toString()
        let checkStatus: string = fs.readFileSync('src\\instancesTemplates\\minecraft\\latestCheckStatus.bat').toString()
        if (options.rconPort) {
            stop = stop.replace('[rconPort]', `${options.rconPort}`)
            checkStatus = checkStatus.replace('[rconPort]', `${options.rconPort}`)
            servProp = servProp.replace(/rcon.port=.*/, `rcon.port=${options.rconPort}`)
        }
        if (options.rconPass) {
            stop = stop.replace('[rconPass]', `${options.rconPass}`)
            checkStatus = checkStatus.replace('[rconPass]', `${options.rconPass}`)
            servProp = servProp.replace(/rcon.password=.*/, `rcon.password=${options.rconPass}`)
        }
        fs.writeFileSync(path + "latestStop.bat", stop)
        fs.writeFileSync(path + "latestCheckStatus.bat", checkStatus)

        if (options.port)
            servProp = servProp.replace(/server-port=.*/, `server-port=${options.port}`)
        if (options.seed)
            servProp = servProp.replace(/level-seed=.*/, `level-seed=${options.seed}`)

        if (options.launcher == 'Vanilla' && options.version) {
            let URLJ: any
            let URLL: any
            https.get('https://launchermeta.mojang.com/mc/game/version_manifest.json', res2 => {
                res2.resume()
                let data = '';
                res2.on('data', (chunk) => data += chunk);
                res2.on('close', () => {
                    let json = JSON.parse(data);
                    for (let entry of json.versions)
                        if (entry.id == options.version)
                            URLJ = entry.url
                    if (URLJ) {
                        https.get(URLJ, res3 => {
                            res3.resume()
                            let data = '';
                            res3.on('data', (chunk) => data += chunk);
                            res3.on('close', () => {
                                let json = JSON.parse(data);
                                URLL = json.downloads.server.url
                                const file = fs.createWriteStream(path+'server.jar');
                                const request = https.get(URLL, function (response) {
                                    response.pipe(file);
                                    file.on("finish", () => {
                                        file.close();
                                    });
                                });
                            });
                        })
                    }
                });
            })
        }
        fs.writeFileSync(path + "eula.txt", 'eula=true')
        fs.writeFileSync(path + "server.properties", servProp)
    }
    public arkTemplate(path: string) { }
    public discordBotTemplate(path: string) { }
    public t6PlutoniumTemplate(path: string) { }
    public theForestTemplate(path: string) { }
    public teamspeak3Template(path: string) { }
    public otherTemplate(path: string) { }
}

const template = new Template
export default template